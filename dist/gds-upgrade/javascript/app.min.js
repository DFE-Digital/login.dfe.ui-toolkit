var COOKIE_NAMES={PREFERENCES_SET:"cookies_preferences_set",POLICY:"cookies_policy",GA:"_ga",GA_GID:"_gid",GA_GAT:"_gat",USER_BANNER_LAST_SEEN:"user_banner_last_seen"},GOVUK_COOKIE_OPTIONS={expires:365,secure:!0,domain:".education.gov.uk"},GovUKCookie={getRaw:function(e){if(window.Cookies)return window.Cookies.get(e)},get:function(e){if(window.Cookies){var t=window.Cookies.get(e);return t?JSON.parse(t):t}},set:function(e,t){if(window.Cookies)return window.Cookies.set(e,t,GOVUK_COOKIE_OPTIONS)},remove:function(e){if(window.Cookies)return window.Cookies.remove(e,GOVUK_COOKIE_OPTIONS)}};function checkConditionForUsersBanner(){var e=GovUKCookie.getRaw(COOKIE_NAMES.USER_BANNER_LAST_SEEN);return!e||((new Date).getTime()-e)/864e5>90}function showReviewUsersBanner(){$("#review-users-banner").show()}function setReviewUsersBannerLastSeen(){GovUKCookie.set(COOKIE_NAMES.USER_BANNER_LAST_SEEN,(new Date).getTime())}function loadReviewUsersBanner(){checkConditionForUsersBanner()&&showReviewUsersBanner()}function updateCookieReviewUsersBanner(){checkConditionForUsersBanner()&&setReviewUsersBannerLastSeen()}GovUKCookie.remove(COOKIE_NAMES.POLICY),GovUKCookie.remove(COOKIE_NAMES.PREFERENCES_SET),GovUKCookie.remove(COOKIE_NAMES.GA),GovUKCookie.remove(COOKIE_NAMES.GA_GAT),GovUKCookie.remove(COOKIE_NAMES.GA_GID),function(e){var t=e.GOVUK||{};t.details={NATIVE_DETAILS:"boolean"==typeof document.createElement("details").open,KEY_ENTER:13,KEY_SPACE:32,started:!1,addEvent:function(e,t,n){e.addEventListener?e.addEventListener(t,(function(e){n(e,e.target)}),!1):e.attachEvent&&e.attachEvent("on"+t,(function(e){n(e,e.srcElement)}))},removeEvent:function(e,t){e.removeEventListener?e.removeEventListener(t,(function(e){}),!1):e.detachEvent&&e.detachEvent("on"+t,(function(e){}))},charCode:function(e){return"number"==typeof e.which?e.which:e.keyCode},preventDefault:function(e){e.preventDefault?e.preventDefault():e.returnValue=!1},addClickEvent:function(e,n){t.details.addEvent(e,"keypress",(function(e,o){t.details.charCode(e)!==t.details.KEY_ENTER&&t.details.charCode(e)!==t.details.KEY_SPACE||"summary"===o.nodeName.toLowerCase()&&(t.details.preventDefault(e),o.click?o.click():n(e,o))})),t.details.addEvent(e,"keyup",(function(e,n){t.details.charCode(e)===t.details.KEY_SPACE&&"SUMMARY"===n.nodeName&&t.details.preventDefault(e)})),t.details.addEvent(e,"click",(function(e,t){n(e,t)}))},getAncestor:function(e,t){do{if(!e||e.nodeName.toLowerCase()===t)break;e=e.parentNode}while(e);return e},addDetailsPolyfill:function(e,n){if(n=n||document.body,!t.details.started&&(t.details.started=!0,0!==(e=n.getElementsByTagName("details")).length)){for(var o=e.length,i=0;i<o;i++){var a=e[i];if(a.__summary=a.getElementsByTagName("summary").item(0),a.__content=a.getElementsByTagName("div").item(0),!a.__summary||!a.__content)return;a.__content.id||(a.__content.id="details-content-"+i),a.setAttribute("role","group"),a.__summary.setAttribute("role","button"),a.__summary.setAttribute("aria-controls",a.__content.id),t.details.NATIVE_DETAILS||(a.__summary.tabIndex=0);var s=null!==a.getAttribute("open");if(!0===s?(a.__summary.setAttribute("aria-expanded","true"),a.__content.setAttribute("aria-hidden","false")):(a.__summary.setAttribute("aria-expanded","false"),a.__content.setAttribute("aria-hidden","true"),t.details.NATIVE_DETAILS||(a.__content.style.display="none")),a.__summary.__details=a,!t.details.NATIVE_DETAILS){var r=document.createElement("i");!0===s?(r.className="arrow arrow-open",r.appendChild(document.createTextNode("▼"))):(r.className="arrow arrow-closed",r.appendChild(document.createTextNode("►"))),a.__summary.__twisty=a.__summary.insertBefore(r,a.__summary.firstChild),a.__summary.__twisty.setAttribute("aria-hidden","true")}}t.details.addClickEvent(n,(function(e,n){return!(n=t.details.getAncestor(n,"summary"))||t.details.statechange(n)}))}},statechange:function(e){var n="true"===e.__details.__summary.getAttribute("aria-expanded"),o="true"===e.__details.__content.getAttribute("aria-hidden");(e.__details.__summary.setAttribute("aria-expanded",n?"false":"true"),e.__details.__content.setAttribute("aria-hidden",o?"false":"true"),t.details.NATIVE_DETAILS)||(e.__details.__content.style.display=n?"none":"",null!==e.__details.getAttribute("open")?e.__details.removeAttribute("open"):e.__details.setAttribute("open","open"));return e.__twisty&&(e.__twisty.firstChild.nodeValue=n?"►":"▼",e.__twisty.setAttribute("class",n?"arrow arrow-closed":"arrow arrow-open")),!0},destroy:function(e){t.details.removeEvent(e,"click")},init:function(){t.details.addEvent(document,"DOMContentLoaded",t.details.addDetailsPolyfill),t.details.addEvent(window,"load",t.details.addDetailsPolyfill)}},e.GOVUK=t}(window);var NSA=NSA||{};const filterBoxes=$(".filter-box");function toKebabCase(e){return e.toLowerCase().replace(/\s+/g,"-")}function hideElement(){$(this).hide()}function uncheckCheckbox(){$(this).prop("checked",!1)}function extractStartingNumberFromId(e){const t=$(`#${e}`);return parseInt(t.prop("id").split("-").pop(),10)}function extractFirstPartFromId(e){const t=e.split("-");return t.length>=2?(t.pop(),`${t.join("-")}-`):e}function updateCount(e){const t=toKebabCase(e),n=$(`.${t} .govuk-checkboxes__input:checked`).length;$(`#${t}-count`).text(n)}function updateCategoryHeader(e){const t=toKebabCase(e),n=$(`#${t}-text`),o=$(`input[id^='show-hide-${t}']:checked`).length>0;n.css("display",o?"block":"none")}function updateNoFilterMessage(){const e=$(".govuk-checkboxes__input.dfe-filter-input:checked").length>0;$("#show-hide-selected-filters").css("display",e?"none":"block")}function showMe(e,t,n){const o=$(`#${n}`).prop("checked");$(`#${e}`).css("display",o?"block":"none"),updateCategoryHeader(t),updateNoFilterMessage()}function filterAndPerformAction(e,t,n){$(`[id^="${e}"]`).filter((function(){const e=parseInt(this.id.split("-").pop(),10);return!Number.isNaN(e)&&e>t})).each(n)}function hideMe(e,t,n){if("Last login"===t){const t=extractStartingNumberFromId(e),o=extractFirstPartFromId(e),i=extractFirstPartFromId(n);filterAndPerformAction(o,t,hideElement),filterAndPerformAction(i,t,uncheckCheckbox);$(".last-login-checkboxes-input").prop("disabled",!1)}$(`#${e}`).hide(),$(`#${n}`).prop("checked",!1),updateCount(t),updateCategoryHeader(t),updateNoFilterMessage()}function initializeFilters(){$(".govuk-checkboxes__input.dfe-filter-input").each((function(){if($(this).prop("checked")){const e=$(this).attr("id"),t=e.match(/show-hide-(.+)-(\d+)/);if(t&&3===t.length){const n=t[1],o=t[2],i=`${n}-option-${o}`;if("last-login"===n&&"6"===o){$(".last-login-checkboxes-input").slice(0,o-1).prop("disabled",!0)}showMe(i,n,e),updateCount(n),updateCategoryHeader(n),updateNoFilterMessage()}}}))}function handleLastLoginCheckboxChange(e,t){e.on("change",(function(){const n=e.index(this);let o;if(this.checked)if("never"===this.value)t.css("display","none"),e.slice(0,n).prop("checked",!1),e.slice(0,n).prop("disabled",!0),initializeFilters();else e.slice(0,n).prop("checked",!0),initializeFilters();else o=extractFirstPartFromId(this.id),filterAndPerformAction(o,n+1,uncheckCheckbox),e.slice(0,n).prop("disabled",!1),filterAndPerformAction("last-login-option-",n+1,hideElement),updateCount("last-login"),updateCategoryHeader("last-login")}))}NSA.filters={init(){function e(e){return e.filter(":checked").length>0?`${e.filter(":checked").length} selected`:""}filterBoxes.each(((t,n)=>{const o=$(n),i=o.find(".container-head"),a=i.find(".option-select-label"),s=o.find("input:checkbox"),r=$("<button />").addClass("js-container-head"),c=$("<div />").addClass("js-selected-counter").text((()=>e(s)));r.on("click",(e=>{const t=$(e.currentTarget),n=t.next();t.hasClass("closed")?(n.show(),t.removeClass("closed").attr("aria-expanded",!0)):(n.hide(),t.addClass("closed").attr("aria-expanded",!1)),e.preventDefault()})).append(a,c),i.replaceWith(r),s.on("change",(()=>{c.text((()=>e(s)))}))}))}},filterBoxes.length>0&&NSA.filters.init(),$((()=>{initializeFilters();const e=$(".last-login-checkboxes-input"),t=$(".last-login-option");e.on("click",(()=>{handleLastLoginCheckboxChange(e,t)}))})),(NSA=NSA||{}).modal={elems:{links:$(".modal-link"),modals:$(".modal")},init:function(){this.modalBg(),this.setUpEvents()},modalBg:function(){var e=this,t=$("<div>").addClass("modal-bg").hide().on("click",(function(){e.hideModals()}));$("body").append(t)},setUpEvents:function(){var e=this;this.elems.links.on("click",(function(t){var n=$(this).attr("href");e.showModal($(n)),t.preventDefault()})),e.elems.modals.find(".close").on("click",(function(t){e.hideModals(),t.preventDefault()})),$("body").on("keydown",(function(t){27===(t.keyCode||t.which)&&e.hideModals()}))},showModal:function(e){$("html").addClass("modal-open"),$(".modal-bg").show(),e.show()},hideModals:function(){$("html").removeClass("modal-open"),$(".modal-bg").hide(),this.elems.modals.hide()}},NSA.modal.init();const RESPONSE_TYPE_CODE="code",RESPONSE_TYPE_ID_TOKEN="ID token",RESPONSE_TYPE_TOKEN="token",FLOW_TYPE_IMPLICIT="implicit",FLOW_TYPE_AUTHORIZATION="authorization",FLOW_TYPE_HYBRID="hybrid";function sortTable(e){var t,n,o,i,a,s,r,c,l=0;for(t=$("table.sortable"),o=!0,c="a";o;){for(o=!1,n=t.find("tr"),i=1;i<n.length-1;i++)if(r=!1,a=n[i].getElementsByTagName("TD")[e],s=n[i+1].getElementsByTagName("TD")[e],"a"===c){if(a.innerHTML.toLowerCase()>s.innerHTML.toLowerCase()){r=!0;break}}else if("d"===c&&a.innerHTML.toLowerCase()<s.innerHTML.toLowerCase()){r=!0;break}r?(n[i].parentNode.insertBefore(n[i+1],n[i]),o=!0,l++):0===l&&"a"===c&&(c="d",o=!0)}return c}$((()=>{const e=(e,t,n)=>{const o=$(`#${e}-add`),i=$(`${t}`);o.on("click",(function(){let t=parseInt(i.data(`${e}-counter`),10);const o=`${e}-${t}`;return $(`\n      <div class="govuk-body dfe-flex-container" id="${e}-input-group-${t}">\n        <label for="${o}" class="govuk-label govuk-label--s govuk-visually-hidden">\n          ${n}\n        </label>\n        <input\n          class="form-control dfe-flex-input-grow govuk-input"\n          id="${o}"\n          name="${e}"\n        />\n        <a href="#" class="govuk-link govuk-link--no-visited-state remove-redirect" id="${e}-remove-${t}" data-group-id="${t}">Remove</a>\n      </div>`).appendTo(i),t+=1,i.data(`${e}-counter`,t),$(this).trigger("blur"),!1})),i.on("click",".remove-redirect",(function(t){t.preventDefault();const n=$(this).data("group-id");$(`#${e}-input-group-${n}`).remove(),$(this).trigger("blur");const o=i.find(".dfe-flex-container").length;i.data(`${e}-counter`,o)}))};function t(e,t,n){$(e).on("click",(function(){const e=window.niceware.generatePassphrase(8).join("-");return window.confirm(n)&&$(`input#${t}`).attr("value",e),$(this).trigger("blur"),!1}))}function n(){const e=[];$("#response_types-id_token").is(":checked")&&e.push("ID token"),$("#response_types-token").is(":checked")&&e.push("token"),$("#response_types-code").is(":checked")&&e.push("code");let t="";if(e.length>0){e.sort(((e,t)=>{const n=["code","ID token","token"];return n.indexOf(e)-n.indexOf(t)}));let n="implicit";if(1===e.length&&e.includes("code")?n="authorization":(e.includes("code")&&e.includes("token")||e.includes("code")&&e.includes("ID token"))&&(n="hybrid"),1===e.length&&e.includes("token"))t="";else{let o;if(e.length>1){o=`${e.slice(0,-1).join(", ")} and ${e[e.length-1]}`}else[o]=e;t=`\n            <div class="govuk-warning-text govuk-!-margin-top-5 govuk-!-margin-bottom-0" id="warning-response-types">\n                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>\n                <strong class="govuk-warning-text__text">\n                    <span class="govuk-warning-text__assistive">Warning</span>\n                    You have selected ${o} as your response type. This means ${n} flow is your flow.\n                </strong>\n            </div>\n        `}}$("#warning-response-types").remove(),t&&$("#response_types-fieldset").append(t);if($("#response_types-code").length){const e=$("#response_types-code").offset().top,t=$(window).scrollTop();$("#response_types-code").is(":checked")?($("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!1),$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideDown(500)):$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideUp(500,(()=>{$("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!0)}));const n=$("#response_types-code").offset().top-e;$("html, body").animate({scrollTop:t+n},50,"linear")}}e("redirect_uris","#redirect_uris-form-group","Redirect URL"),e("post_logout_redirect_uris","#post_logout_redirect_uris-form-group","Logout redirect URL"),t("#generate-clientSecret","clientSecret","Are you sure you want to regenerate the client secret?"),t("#generate-apiSecret","apiSecret","Are you sure you want to regenerate the API secret?"),n(),$("#response_types-id_token, #response_types-token, #response_types-code").on("change",(()=>{n()}))})),(e=>{const t=e,n=e.jQuery,o=e.GOVUK||{};function i(){const e=this,t="ShowHideContent",o='[data-target] > input[type="radio"]',i='[data-target] > input[type="checkbox"]',a="a.js-toggle-content",s="[data-target] > select";function r(e){let t=e.attr("aria-controls");return t||(t=e.closest("[data-target]").data("target")),n(`#${t}`)}function c(){const e=n(this),t=r(e);t.length&&(e.attr("aria-controls",t.attr("id")),e.attr("aria-expanded","false"))}function l(e,t){t.hasClass("js-hidden")&&(t.removeClass("js-hidden"),e.attr("aria-controls")&&e.attr("aria-expanded","true"))}function d(e,t){const n=t||r(e);n.hasClass("js-hidden")||(n.addClass("js-hidden"),e.attr("aria-controls")&&e.attr("aria-expanded","false"))}function u(e,t){const i=`${o}[name=${a=e.attr("name"),a.replace("[","\\[").replace("]","\\]")}][aria-controls]`;var a;const s=e.closest("form");(s.length?s.find(i):n(i)).each((function(){d(n(this))})),e.is("[aria-controls]")&&l(e,t)}function p(e,t){e.is(":checked")?l(e,t):d(e,t)}function h(e,t,n){t.hasClass("js-hidden")?l(e,t):d(e,t),n.preventDefault()}function f(e,t){e.val()!==e.data("option")?(d(t,t),e.data("clear")&&t.find(":input").each(((e,t)=>{t.value=""}))):l(e,t)}function m(e,o,i,a){const s=e||n(document.body);function l(e){const t=n(this);a(t,r(t),e)}const d=n(o);d.each(c),n.each(i,((e,n)=>{a===f?s.on(`change.${t}`,n,l):s.on(`click.${t}`,n,l)})),a===p&&d.is(":checked")&&d.filter(":checked").each(l),a===f&&d.each(l)}e.showHideRadioToggledContent=function(e){m(e,o,function(){const e=[];return n(o).map((function(){const t=n(this).attr("name");return-1===n.inArray(t,e)?(e.push(t),`input[type="radio"][name="${n(this).attr("name")}"]`):null}))}(),u)},e.showHideCheckboxToggledContent=function(e){m(e,i,[i],p)},e.showHideLinkToggledContent=function(e){m(e,a,[a],h)},e.showHideSelectToggledContent=function(e){m(e,s,[s],f)},e.destroy=function(e){(e||n(document.body)).off(`.${t}`)}}i.prototype.init=function(e){this.showHideRadioToggledContent(e),this.showHideCheckboxToggledContent(e),this.showHideLinkToggledContent(e),this.showHideSelectToggledContent(e)},o.ShowHideContent=i,t.GOVUK=o})(window),$((function(){$("table.sortable thead th").on("click",(function(){var e=$("table.sortable thead tr th");e.removeClass("sorted").removeClass("dir-a").removeClass("dir-d");var t=sortTable(e.index($(this)));$(this).addClass("sorted dir-"+t)}))}));var toggleTips=$(".toggle-help");function validatePassword(){var e=$(this).attr("id"),t=$(this).val();$(`#length-${e}`).removeClass(t.length>=14?"icon-remove":"icon-ok"),$(`#length-${e}`).addClass(t.length>=14?"icon-ok":"icon-remove")}toggleTips.each((function(){var e,t,n,o;e=$(this),n=$("<span />").attr("class","toggletip"),o=$("<button />").attr("type","button").attr("aria-label","Help").attr("data-toggletip-content",e.html()).text("?").on("click",(function(){var t=$(this).data("toggletip-content"),n=$(this).next();window.setTimeout((function(){n.html((function(){return $("<span />").attr("class",(function(){return e.html().length>50?"bubble long":"bubble"})).text(t)}))}),100)})).on("keydown",(function(e){27===(e.keyCode||e.which)&&t.html("")})),t=$("<span />").attr("role","status"),n.append(o,t),e.before(n).remove(),$(document).on("click",(function(n){e[0]!==$(n.target)&&t.html("")}))})),$(".password-input-check").each((function(){var e=$(this),t=e.attr("id"),n=$(`<div id='validation-feedback-${t}'>`).append(`<div id='length-${t}' class='icon-remove'>be at least 14 characters</div>`);e.before(n)})),$(".password-input-check").on("keyup",validatePassword);var forms=$("#content form");forms.attr("novalidate","novalidate");NSA=NSA||{};function select2ModelMatcher(e,t){if(t.parentText=t.parentText||"",void 0===e.term||!e.term||""===e.term.trim())return t;if(t.children&&t.children.length>0){for(var n=$.extend(!0,{},t),o=t.children.length-1;o>=0;o--){var i=t.children[o];i.parentText+=t.parentText+" "+t.text,null==select2ModelMatcher(e,i)&&n.children.splice(o,1)}return n.children.length>0?n:select2ModelMatcher(e,n)}var a=(t.parentText+" "+t.text).toUpperCase(),s=e.term.toUpperCase();return a.indexOf(s)>-1?t:null}NSA={initialiseShowPassword:function(){$(".password-input").each((function(){var e=$(this),t=$("<button />").prop({type:"button",class:"show-password govuk-button govuk-button--secondary govuk-!-margin-bottom-1",ariaLabel:"Show password"});t.html("Show"),t.on("click",(function(){"password"===e.attr("type")?(e.attr("type","text"),t.text("Hide")):(e.attr("type","password"),t.text("Show"))})),e.after(t)}))},backLink:function(){var e=$("<a>").attr({href:"#",class:"govuk-back-link-bold"}).text("Back").on("click",(function(e){window.history.back(),e.preventDefault()}));$(".js-back-link").html(e)}},$("select.select2").length>0&&$("select.select2").select2({matcher:select2ModelMatcher}),$(".password-input").length>0&&NSA.initialiseShowPassword(),$(".js-back-link")&&NSA.backLink(),$(".under-construction").on("click",(function(e){window.alert("This functionality is not available yet"),e.preventDefault()})),$(".notification span.icon").length>0&&$(".notification span.icon").on("click",(function(){$(this).parent().hide()})),$("article.organisation-services").length>0&&($(".information").on("click",(function(e){var t=$(this).parent().parent().find(".service-description");e.preventDefault(),t.toggle()})),$(".info-link").on("click",(function(e){var t=$(this).parent().next();e.preventDefault(),t.toggle()})));var searchFields=$("form .search-field");if(searchFields.length>0){var loader=$("<span />").addClass("loader spinner-inline"),b1=$("<span />").addClass("ball b-1"),b2=$("<span />").addClass("ball b-2");loader.append(b1).append(b2),searchFields.each((function(){var e=$(this).parent(),t=e.find("button");e.on("submit",(function(){t.after(loader).hide()}))}))}var formRegister=$(".prevent-form-double-submission");formRegister.length>0&&formRegister.each((function(){var e=$(formRegister).find("button:submit"),t=e.eq(0);formRegister.on("submit",(function(){e.attr("disabled","disabled"),t.css("min-width",t.outerWidth()+"px"),t.append("<span class='loader spinner-inline'> <span class='ball b-1'></span> <span class='ball b-2'></span> <span class='ball b-3'></span> </span>")}))})),$(".auto-scroll-on-change").on("change",(function(){$(window).scrollTop($(".auto-scroll-dest").position().top)})),$(".close-button").on("click",(function(e){e.target.closest(".govuk-notification-banner").remove()})),$(".toggle-open").on("click",(function(e){var t=$(this).next();e.preventDefault(),t.removeClass("govuk-visually-hidden"),$(this).addClass("govuk-visually-hidden")}));var tabId=(new Date).getTime();const sessionDurationInMinutes=480,notifyUserWhenSessionMinutesRemain=5;function getSessionNotifyUserInSeconds(){return 60*notifyUserWhenSessionMinutesRemain-1}function updateSessionCounterDisplay(e){const t=Math.floor(e/60),n=e%60;$("#minutes").html(t.toString().padStart(1,"0")),$("#seconds").html(n.toString().padStart(2,"0"))}function sessionTimeout(){window.localStorage.removeItem("uri"),window.onfocus=function(){countTimeDiff()},updateSessionCounterDisplay(getSessionNotifyUserInSeconds());const e=1e3*(60*sessionDurationInMinutes-getSessionNotifyUserInSeconds());setTimeout((function(){window.localStorage.setItem("tabs","1"),$(".session-timeout-overlay").show(),$("#modal-signin").focus(),startTimer()}),e)}var timeoutTimer;function startTimer(){var e=getSessionNotifyUserInSeconds();timeoutTimer=setInterval((function(){"0"===window.localStorage.getItem("tabs")&&(clearInterval(timeoutTimer),location.reload()),updateSessionCounterDisplay(--e),e<=0?callTimeout():tabId&&countTimeDiff()}),1e3)}function callTimeout(){clearInterval(timeoutTimer),window.localStorage.setItem("uri",location.pathname),location.href="/signout"}function countTimeDiff(){((new Date).getTime()-Number(tabId))/6e4>sessionDurationInMinutes&&(window.localStorage.setItem("uri",location.pathname),clearInterval(timeoutTimer),location.reload())}$("#modal-signin").on("click",(()=>{clearInterval(timeoutTimer),window.localStorage.setItem("tabs","0"),location.reload()})),$("#modal-signout").on("click",(()=>{clearInterval(timeoutTimer),location.href="/signout"}));var showHideContent=new GOVUK.ShowHideContent;showHideContent.init(),GOVUK.details.init();const dfeIdentifier = '2025-02-28T10:59:16.598Z';
//# sourceMappingURL=data:application/json;charset=utf8;base64,
