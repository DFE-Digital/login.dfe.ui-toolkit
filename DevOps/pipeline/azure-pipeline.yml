name: $(BuildDefinitionName)_tag-$(BuildID)_at-$(Date:yyyyMMdd)$(Rev:.r)
resources:
  repositories:
  # Defult branch is master
    - repository: devopsTemplates
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.devops
      ref: main

trigger:
  branches:
    include:
    - release/*
    - main
    - feature/*

pr:
  branches:
    include:
    - main

parameters:
- name: location
  type: string
  displayName: 'Select Deploy location'
  default: westeurope
  values:
    - westeurope
    - northeurope
- name: cdn 
  type: boolean
  displayName: 'New Version of CDN'
  default: true
- name: tran 
  type: boolean
  displayName: 'Transformation Deployment'
  default: false
- name: dev
  type: boolean
  displayName: 'Dev Deployment'
  default: false
- name: test
  type: boolean
  displayName: 'Test Deployment'
  default: false
- name: pp
  type: boolean
  displayName: 'Pre-Prod Deployment'
  default: false
- name: pr
  type: boolean
  displayName: 'Prod Deployment'
  default: false
- name: gitCheck
  type: boolean
  displayName: 'Bypass Git Check in Test'
  default: false  
- name: InfrDeploy
  type: boolean
  displayName: 'Infrastrucure Deployment only'
  default: false

variables:
- group: dsi-global
- name: tran
  ${{ if eq(parameters.tran, 'true') }}: 
    value: true
  ${{ else }}:
    value: false
- name: dev
  ${{ if or(eq(parameters.dev, 'true'), contains(variables['Build.SourceBranch'],'feature')) }}:
    value: true
  ${{ else }}:
    value: false
- name: test
  ${{ if or(eq(parameters.test, 'true'), contains(variables['Build.SourceBranch'],'feature')) }}:
    value: true
  ${{ else }}:
    value: false
- name: pp
  ${{ if and(or(eq(parameters.pp, 'true'), contains(variables['Build.SourceBranch'],'main')), not(contains(variables['Build.SourceVersionMessage'],'Upgrade to version'))) }}:
    value: true
  ${{ else }}:
    value: false
- name: pr
  ${{ if or(eq(parameters.pr, 'true'), contains(variables['Build.SourceBranch'],'release')) }}:
    value: true
  ${{ else }}:
    value: false
- name: applicationFullName
  value: 'ui-toolkit'    

stages:

# Code Scans & Build the artifact for deployment
#- stage: scanApp
 # displayName: "Scan tools & Build"
  #jobs:
  # Code scaning tools
  #- template:  pipeline/scanTools.yml@devopsTemplates
   # parameters:
   #   npmInstCmd: 'install --force --json --no-package-lock'
   #   AppDeploy: ${{ not(parameters.InfrDeploy) }}
  # - template:  pipeline/dependencyCheck.yml@devopsTemplates
  #   parameters:
  #     npmInstCmd: 'install --force --json --no-package-lock'

- ${{ each var in variables }}:
  - ${{ if in(var.key, 'tran','dev','test','pp','pr') }}:
    - ${{ if eq(var.value, 'true') }}:
      - stage: Deployment_${{var.Key}}
        dependsOn: 
        #- scanApp
        variables:
        - name: environmentId
          ${{ if eq(var.key, 'tran') }}:
            value: d03
          ${{ if eq(var.key, 'dev') }}:
            value: d01
          ${{ if eq(var.key, 'test') }}:
            value: t01
          ${{ if eq(var.key, 'pp') }}:
            value: t02
          ${{ if eq(var.key, 'pr') }}:
            value: p01
        - name: neuProjectId
          ${{ if eq(parameters.location, 'westeurope') }}:
            value: ""
          ${{ else }}:
            value: "neu-"
        - name: SubShortName
          value: $(platformGlobalIdentifier)$(environmentId)
        - name: storageAccountName
          ${{ if eq(parameters.location, 'westeurope') }}:
            value: $(SubShortName)signinshdstr
          ${{ else }}:
            value: $(SubShortName)neusigninshdstr          
        - name: ShdResourceGroupName
          value: $(SubShortName)-$(neuProjectId)shd
        - name: UIContainerName
          value: ui-assets
        - name: azureCdnName
          value: $(SubShortName)-signin-shd-cdn
        - name: cdnEndpointName
          value: $(SubShortName)-signin-shd-cdnep
        - name: keyVaultName
          value: $(SubShortName)-signin-kv
        displayName: "Deployment [${{var.Key}}] ${{parameters.location}}"
        jobs:
        - deployment: 'Deploy_${{var.Key}}'
          pool:
            vmImage: 'windows-latest'
          displayName: Updated content of CDN
          environment: ${{var.Key}}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self

                  - task: AzurePowerShell@5
                    displayName: Enable Access
                    inputs:
                      ${{ if or(eq(var.key, 'dev'), eq(var.key, 'tran')) }}:
                        azureSubscription: $(devServiceConnection)
                      ${{ elseif eq(var.key, 'pr') }}:
                        azureSubscription: $(prodServiceConnection)
                      ${{ else }}:
                        azureSubscription: $(testServiceConnection)
                      ScriptType: 'InlineScript'
                      azurePowerShellVersion: 'LatestVersion'
                      Inline: |
                        $publicIp = Invoke-RestMethod -uri https://api.ipify.org
                        Write-Host "Public Ip : $publicIp "
                        Add-AzStorageAccountNetworkRule -ResourceGroupName $(ShdResourceGroupName) -AccountName $(storageAccountName) -IPAddressOrRange "$publicIp"
                        Write-Host "##vso[task.setvariable variable=agentIp]$publicIp"

                  - task: AzureCLI@2
                    displayName: 'Empty Storage Container Contents & upload Content'
                    inputs:
                      ${{ if or(eq(var.key, 'dev'), eq(var.key, 'tran')) }}:
                        azureSubscription: $(devServiceConnection)
                      ${{ elseif eq(var.key, 'pr') }}:
                        azureSubscription: $(prodServiceConnection)
                      ${{ else }}:
                        azureSubscription: $(testServiceConnection)
                      scriptType: pscore
                      scriptLocation: inlineScript
                      inlineScript: |
                        Write-Information "Waiting for FW rule to apply." -InformationAction Continue

                        $FWTestAttempt = 1
                        $FWTestMax = 25

                        do {
                            try {
                                az storage blob delete-batch --account-name $(storageAccountName) --source $(UIContainerName) --only-show-errors --auth-mode=login
                                az storage blob upload-batch  --account-name $(storageAccountName) --source  $(System.DefaultWorkingDirectory)/dist --destination $(UIContainerName) --auth-mode=login
                                $FWTest = $true
                                Write-Information "Storage is now accessible upload data" -InformationAction Continue
                                exit 0
                            }
                            catch {
                                if ($FWTestAttempt -lt $FWTestMax) {
                                    Write-Warning "Unable to access storage account $FWTestAttempt/$FWTestMax. Waiting for FW rule to take effect." -WarningAction Continue
                                    $FWTestAttempt++
                                    Start-Sleep -Seconds 20
                                }
                                else {
                                    Write-Error "Unable to access storage account $FWTestAttempt/$FWTestMax."
                                }
                            }
                        } while (-not $FWTest)
                  - task: AzureCLI@2
                    displayName: Purge content & Updated CDN Version
                    env:
                      newCdnV: ${{ parameters.cdn }}
                    inputs:
                      ${{ if or(eq(var.key, 'dev'), eq(var.key, 'tran')) }}:
                        azureSubscription: $(devServiceConnection)
                      ${{ elseif eq(var.key, 'pr') }}:
                        azureSubscription: $(prodServiceConnection)
                      ${{ else }}:
                        azureSubscription: $(testServiceConnection)
                      scriptType: pscore
                      scriptLocation: inlineScript
                      inlineScript: |
                        az storage account network-rule remove -g $(ShdResourceGroupName) --account-name $(storageAccountName) --ip-address $(agentIp)

                        if($ShdResourceGroupName -NotLike '*neu*'){
                          az cdn endpoint purge --content-paths /* --profile-name $(azureCdnName) -g $(ShdResourceGroupName) -n $(cdnEndpointName) 

                          if($env:newCdnV){
                            $IpAddress = Invoke-RestMethod -uri https://api.ipify.org
                            az keyvault network-rule add --name $(keyVaultName) --resource-group $(ShdResourceGroupName) --ip-address $IpAddress -o none
                            $cdnAssetsVersion = $(az keyvault secret show -n cdnAssetsVersion --vault-name $(keyVaultName)).value
                            $cdnAssetsVersion = [decimal]$cdnAssetsVersion
                            $newCdnAssetsVersion = $cdnAssetsVersion+0.1
                            az keyvault secret set --name cdnAssetsVersion --vault-name $(keyVaultName) --value $newCdnAssetsVersion
                            az keyvault network-rule remove --name $(keyVaultName) --resource-group $(ShdResourceGroupName) --ip-address $IpAddress -o none
                          }
                        }
      - ${{ if and(eq(var.key, 'pr'),eq(parameters.location, 'westeurope')) }}:
        - stage: branchPrTag
          displayName: "GitHub PR & Release Branch Tag"
          dependsOn: 
          - Deployment_${{var.Key}}
          jobs:
          - template:  pipeline/tagCreation.yml@devopsTemplates
            parameters:
              applicationName: ${{variables.applicationFullName}}      

