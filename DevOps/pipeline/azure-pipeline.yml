name: $(BuildDefinitionName)_tag-$(BuildID)_at-$(Date:yyyyMMdd)$(Rev:.r)
resources:
  repositories:
    # Defult branch is master
    - repository: devopsTemplates
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.devops
      ref: main

trigger:
  branches:
    include:
      - release/*
      - main
      - feature/*

pr:
  branches:
    include:
      - main

parameters:
  - name: locations
    type: object
    displayName: "Deployment locations (- westeurope & - northeurope)"
    default:
      - westeurope
      - northeurope
  - name: shaUse
    type: boolean
    displayName: "Use Self Host agent"
    default: true
  - name: cdn
    type: boolean
    displayName: "New Version of CDN"
    default: true
  - name: tran
    type: boolean
    displayName: "Transformation Deployment"
    default: false
  - name: dev
    type: boolean
    displayName: "Dev Deployment"
    default: false
  - name: test
    type: boolean
    displayName: "Test Deployment"
    default: false
  - name: pp
    type: boolean
    displayName: "Pre-Prod Deployment"
    default: false
  - name: pr
    type: boolean
    displayName: "Prod Deployment"
    default: false

variables:
  - group: dsi-global
  - group: dsi-envs-list
  - name: tran
    value: ${{ eq(parameters.tran, 'true') }}
  - name: dev
    value: ${{ or(eq(parameters.dev, 'true'), contains(variables['Build.SourceBranch'],'feature')) }}
  - name: test
    value: ${{ or(eq(parameters.test, 'true'), contains(variables['Build.SourceBranch'],'feature')) }}
  - name: pp
    value: ${{ and(or(eq(parameters.pp, 'true'), contains(variables['Build.SourceBranch'],'main')), not(contains(variables['Build.SourceVersionMessage'],'Upgrade to version'))) }}
  - name: pr
    value: ${{ or(eq(parameters.pr, 'true'), contains(variables['Build.SourceBranch'],'release')) }}
  - name: applicationFullName
    value: "ui-toolkit"
  - name: northeurope
    value: "tran,pp,pr"
  - name: westeurope
    value: "tran,dev,test,pp,pr"

stages:
  # Code Scans & Build the artifact for deployment
  - stage: scanApp
    displayName: "Scan tools & Build"
    jobs:
      # Code scaning tools
      - template: pipeline/components/checks/checks.yml@devopsTemplates
        parameters:
          AppDeploy: true
          custRegAuth: $(custRegAuth)

      - template: pipeline/buildToolkit.yml@devopsTemplates
        parameters:
          applicationName: ${{variables.applicationFullName}}
          custRegAuth: $(custRegAuth)
          nodeVersionSpec: "18.17.0"

  - ${{ each location in parameters.locations }}:
      - ${{each env in split(variables[location],',') }}:
          - ${{ if eq(variables[env], 'true') }}:
              - stage: Deployment_${{env}}_${{location}}
                dependsOn:
                  - scanApp
                variables:
                  - name: environmentId
                    value: $[variables['${{env}}EnvId']]
                  - name: secRegionId
                    value: $(${{ format('{0}{1}', location, 'Id') }})
                  - name: SubShortName
                    value: $(platformGlobalIdentifier)$(environmentId)
                  - name: storageAccountName
                    value: ${{ format('{0}{1}signinshdstr', variables.SubShortName, variables.secRegionId) }}
                  - name: ShdResourceGroupName
                    value: $(SubShortName)-$(secRegionId)shd
                  - name: UIContainerName
                    value: ui-assets
                  - name: frontDoorCdnResourceGroupName
                    value: $(SubShortName)-fd
                  - name: frontDoorCdnProfileName
                    value: $(SubShortName)-signin-fd
                  - name: frontDoorCdnEndpointName
                    value: $(SubShortName)-signin
                  - name: keyVaultName
                    value: $(SubShortName)-signin-kv
                  - name: keyVaultResourceGroupName
                    value: "$(SubShortName)-shd"
                  - name: ServConName
                    value: ${{ format('{0}{1}', env, 'ServCon') }}
                  - name: loc
                    value: ${{location}}
                  - name: agShaCode
                    ${{ if in(env, 'tran','dev') }}:
                      value: tran
                    ${{ elseif in(env, 'test','pp') }}:
                      value: pp
                    ${{ elseif in(env, 'pr') }}:
                      value: pr
                displayName: "Deployment [${{env}}] ${{location}}"
                ${{ if eq(parameters.shaUse, 'true') }}:
                  pool:
                    name: $[variables['${{env}}ShaPool']]
                    demands: Agent.Name -equals Agent-Linux-${{variables.secRegionId}}$(agShaCode)-cg-0-ci-0
                jobs:
                  - deployment: "Deploy_${{env}}"
                    displayName: Updated content of CDN
                    environment: ${{env}}
                    strategy:
                      runOnce:
                        deploy:
                          steps:
                            - checkout: self
                              persistCredentials: true
                            - checkout: devopsTemplates

                            - task: AzureCLI@2
                              displayName: "White-list keyVault"
                              condition: ${{not(parameters.shaUse)}}
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                scriptType: "pscore"
                                scriptLocation: "scriptPath"
                                scriptPath: "login.dfe.devops/scripts/keyvaultWhiteListCheck.ps1"
                                arguments: "-keyVault $(keyVaultName) -keyVaultRg $(keyVaultResourceGroupName) -WhiteListIP $True -NotSelfHost $True"
                                workingDirectory: $(System.DefaultWorkingDirectory)

                            - task: AzureKeyVault@2
                              displayName: Load environment secrets
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                KeyVaultName: "$(keyVaultName)"
                                SecretsFilter: "cdnHostName"
                                RunAsPreJob: false

                            - task: AzureCLI@2
                              displayName: "Enable Access to Storage Account"
                              condition: ${{not(parameters.shaUse)}}
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                scriptType: pscore
                                scriptLocation: inlineScript
                                inlineScript: |
                                  $storageAccountName = "$(storageAccountName)".replace('-','')
                                  $publicIp = Invoke-RestMethod -uri https://api.ipify.org
                                  Write-Host "Public Ip : $publicIp "
                                  az storage account network-rule add --ip-address $publicIp --resource-group $(ShdResourceGroupName) --account-name $storageAccountName
                                  Write-Host "##vso[task.setvariable variable=agentIp]$publicIp"
                                  Start-Sleep -Seconds 20

                            - task: AzureCLI@2
                              displayName: "Empty, upload & Purge Storage & CDN Contents & Updated CDN Version  "
                              env:
                                newCdnV: ${{ parameters.cdn }}
                                cdnHostName: $(cdnHostName)
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                scriptType: pscore
                                scriptLocation: inlineScript
                                ${{ if not(parameters.shaUse) }}:
                                  workingDirectory: $(System.DefaultWorkingDirectory)
                                inlineScript: |

                                  $FWTestAttempt = 1
                                  $FWTestMax = 30
                                  $loc = "$(loc)"
                                  $storageAccountName = "$(storageAccountName)".replace('-','')

                                  do {
                                      try {
                                          write-output "Removing files from storage account"

                                          az storage blob delete-batch --account-name $storageAccountName --source $(UIContainerName) --auth-mode=login
                                          if ($? -eq $false) {
                                            throw 'Failed to  delete-batch on storage account'
                                          }
                                          
                                          write-output "Uploading files to storage account"
                                          az storage blob upload-batch  --account-name $storageAccountName --source  $(System.DefaultWorkingDirectory)/login.dfe.ui-toolkit/dist --destination $(UIContainerName) --auth-mode=login
                                          if ($? -eq $false) {
                                            throw 'Failed to  upload-batch on storage account'
                                          }

                                          break
                                      }
                                      catch {
                                          if ($FWTestAttempt -lt $FWTestMax) {
                                              write-output "An error occurred during adding or removing files in storage account - attempt $FWTestAttempt/$FWTestMax - retrying..."
                                              $FWTestAttempt++
                                              Start-Sleep -Seconds 10
                                          }
                                          else {
                                              Write-Error "Max retries reached"
                                              exit 1
                                          }
                                      }
                                  } while ($FWTestAttempt -le $FWTestMax)

                                  if($ShdResourceGroupName -NotLike '*neu*'){
                                    $cdnHostNameStripped = $env:cdnHostName -replace 'https://', ''
                                    write-output "Purging CDN - this will take several minutes"
                                    az afd endpoint purge --resource-group $(frontDoorCdnResourceGroupName) --profile-name $(frontDoorCdnProfileName) --endpoint-name $(frontDoorCdnEndpointName) --domains $cdnHostNameStripped --content-paths /* --verbose
                                    az afd endpoint purge --resource-group $(frontDoorCdnResourceGroupName) --profile-name $(frontDoorCdnProfileName) --endpoint-name $(frontDoorCdnEndpointName) --domains $cdnHostNameStripped --content-paths /* --verbose

                                    if($env:newCdnV){
                                      write-output "Incrementing keyvault value cdnAssetsVersion by 0.1"
                                      $cdnAssetsVersion = $(az keyvault secret show -n cdnAssetsVersion --vault-name $(keyVaultName)).value
                                      $cdnAssetsVersion = [decimal]$cdnAssetsVersion
                                      $newCdnAssetsVersion = $cdnAssetsVersion+0.1
                                      az keyvault secret set --name cdnAssetsVersion --vault-name $(keyVaultName) --value $newCdnAssetsVersion
                                    }
                                  }

                            - task: AzureCLI@2
                              displayName: Remove White-list of storage
                              condition: ${{not(parameters.shaUse)}}
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                scriptType: pscore
                                scriptLocation: inlineScript
                                inlineScript: |
                                  $storageAccountName = "$(storageAccountName)".replace('-','')
                                  az storage account network-rule remove -g $(ShdResourceGroupName) --account-name $storageAccountName --ip-address $(agentIp)

                            - task: AzureCLI@2
                              displayName: "Remove White-list keyVault"
                              condition: ${{not(parameters.shaUse)}}
                              inputs:
                                azureSubscription: $(${{variables.ServConName}})
                                scriptType: "pscore"
                                scriptLocation: "scriptPath"
                                scriptPath: "login.dfe.devops/scripts/keyvaultWhiteListCheck.ps1"
                                arguments: "-keyVault $(keyVaultName) -keyVaultRg $(keyVaultResourceGroupName) -WhiteListIP $False -NotSelfHost $True"
                                workingDirectory: $(System.DefaultWorkingDirectory)

              - ${{ if and(eq(env, 'pp'),eq(location, 'westeurope')) }}:
                  - stage: releasebranch
                    displayName: "GitHub Release Branch Creation"
                    dependsOn:
                      - Deployment_${{env}}_westeurope
                    jobs:
                      - template: pipeline/components/git/releaseCreation.yml@devopsTemplates

              - ${{ if and(eq(env, 'pr'),eq(location, 'westeurope')) }}:
                  - stage: branchPrTag
                    displayName: "GitHub PR & Release Branch Tag"
                    dependsOn:
                      - Deployment_${{env}}_westeurope
                    jobs:
                      - template: pipeline/components/git/tagCreation.yml@devopsTemplates
                        parameters:
                          applicationName: ${{variables.applicationFullName}}
